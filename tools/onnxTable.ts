import {writeFileSync, readFileSync} from 'fs';

import {enabledTests, opsetVersions} from '../test/data/enabledTests';

import {onnx} from 'onnx-proto';

const dataDir = 'test/data/onnx';

interface SupportedOperator {
  name: string;
  opsets: Set<string>;
  backends: Set<string>;
}

const supportedOperators: {[name: string]: SupportedOperator} = {};

for (const opset of opsetVersions) {
  for (const enabledTest of enabledTests) {
    console.log(enabledTest);

    if (
      typeof enabledTest === 'string' ||
      enabledTest.opsets === undefined ||
      enabledTest.opsets.find(os => os === opset) !== undefined
    ) {
      const testName =
        typeof enabledTest === 'string' ? enabledTest : enabledTest.name;

      const data = readFileSync(`${dataDir}/${opset}/${testName}/model.onnx`);
      const model = onnx.ModelProto.decode(data);
      const opType = model.graph.node[0].opType;

      if (supportedOperators[opType] === undefined) {
        supportedOperators[opType] = {
          name: opType,
          opsets: new Set(),
          backends: new Set(),
        };
      }

      supportedOperators[opType].opsets.add(opset);
      if (
        typeof enabledTest !== 'string' &&
        enabledTest.backends !== undefined
      ) {
        for (const backend of enabledTest.backends) {
          supportedOperators[opType].backends.add(backend);
        }
      } else {
        supportedOperators[opType].backends.add('CPU');
        supportedOperators[opType].backends.add('WASM');
        supportedOperators[opType].backends.add('GPU');
      }
    }
  }
}

let res = `
# Supported onnx operators

These are the onnx operators that are supported by tensor-js at the moment.
If you'd like to see more, open an [issue](https://github.com/Hoff97/tensorjs/issues/new)
or a [Pull Request](https://github.com/Hoff97/tensorjs/compare) if you have it implemented
already. If not specified otherwise, all operators are supported on all backends and
on onnx opsets ${opsetVersions[0]} - ${opsetVersions[opsetVersions.length - 1]}.

This file is automatically generated. To update it run
\`\`\`sh
 $ npm run onnxTable
\`\`\`

| Operator        | Opsets           | Backends           |
| ------------- | ------------- | ------------- |\n`;

for (const operator in supportedOperators) {
  const opsets = Array.from(supportedOperators[operator].opsets).map(x =>
    parseInt(x)
  );
  const opsetString =
    opsets.length === opsetVersions.length ? 'All' : opsets.join(',');
  const backendString =
    supportedOperators[operator].backends.size === 3
      ? 'All'
      : Array.from(supportedOperators[operator].backends).join(',');
  const link = `[${operator}](https://github.com/onnx/onnx/blob/master/docs/Operators.md#${operator})`;
  const line = `| ${link} | ${opsetString} | ${backendString} |\n`;
  res += line;
}

writeFileSync('doc/Operators.md', res);
