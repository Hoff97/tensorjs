{"version":3,"sources":["../../../../lib/wasm/rust_wasm_tensor_bg.js","../node_modules/webpack/buildin/harmony-module.js","../../../../lib/wasm/rust_wasm_tensor.js"],"names":["heap","ret","Tensor","__wrap","module","exports","originalModule","webpackPolyfill","Object","create","children","defineProperty","enumerable","get","l","i"],"mappings":"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","file":"static/js/3.e9746bc5.chunk.js","sourcesContent":["import * as wasm from './rust_wasm_tensor_bg.wasm';\nvar heap = new Array(32).fill(undefined);\nheap.push(undefined, null, true, false);\nfunction getObject(idx) { return heap[idx]; }\nvar heap_next = heap.length;\nfunction dropObject(idx) {\n    if (idx < 36)\n        return;\n    heap[idx] = heap_next;\n    heap_next = idx;\n}\nfunction takeObject(idx) {\n    var ret = getObject(idx);\n    dropObject(idx);\n    return ret;\n}\nvar lTextDecoder = typeof TextDecoder === 'undefined' ? (0, module.require)('util').TextDecoder : TextDecoder;\nvar cachedTextDecoder = new lTextDecoder('utf-8', { ignoreBOM: true, fatal: true });\ncachedTextDecoder.decode();\nvar cachegetUint8Memory0 = null;\nfunction getUint8Memory0() {\n    if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {\n        cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);\n    }\n    return cachegetUint8Memory0;\n}\nfunction getStringFromWasm0(ptr, len) {\n    return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));\n}\nfunction addHeapObject(obj) {\n    if (heap_next === heap.length)\n        heap.push(heap.length + 1);\n    var idx = heap_next;\n    heap_next = heap[idx];\n    heap[idx] = obj;\n    return idx;\n}\nfunction _assertClass(instance, klass) {\n    if (!(instance instanceof klass)) {\n        throw new Error(\"expected instance of \" + klass.name);\n    }\n    return instance.ptr;\n}\n/**\n*/\nvar Tensor = /** @class */ (function () {\n    function Tensor() {\n    }\n    Tensor.__wrap = function (ptr) {\n        var obj = Object.create(Tensor.prototype);\n        obj.ptr = ptr;\n        return obj;\n    };\n    Tensor.prototype.free = function () {\n        var ptr = this.ptr;\n        this.ptr = 0;\n        wasm.__wbg_tensor_free(ptr);\n    };\n    Object.defineProperty(Tensor.prototype, \"size\", {\n        /**\n        * @returns {number}\n        */\n        get: function () {\n            var ret = wasm.__wbg_get_tensor_size(this.ptr);\n            return ret >>> 0;\n        },\n        /**\n        * @param {number} arg0\n        */\n        set: function (arg0) {\n            wasm.__wbg_set_tensor_size(this.ptr, arg0);\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n    * @param {Uint32Array} shape\n    * @param {Float32Array} values\n    * @returns {Tensor}\n    */\n    Tensor.create = function (shape, values) {\n        var ret = wasm.tensor_create(addHeapObject(shape), addHeapObject(values));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} shape\n    * @param {number} value\n    * @returns {Tensor}\n    */\n    Tensor.create_constant = function (shape, value) {\n        var ret = wasm.tensor_create_constant(addHeapObject(shape), value);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.exp = function () {\n        var ret = wasm.tensor_exp(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.log = function () {\n        var ret = wasm.tensor_log(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.sqrt = function () {\n        var ret = wasm.tensor_sqrt(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.abs = function () {\n        var ret = wasm.tensor_abs(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.addition = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_addition(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.subtraction = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_subtraction(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.multiply = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_multiply(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.divide = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_divide(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.power = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_power(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @returns {Tensor}\n    */\n    Tensor.prototype.matmul = function (other) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_matmul(this.ptr, other.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @param {boolean} a_transpose\n    * @param {boolean} b_transpose\n    * @param {number} alpha\n    * @returns {Tensor}\n    */\n    Tensor.prototype.gemm = function (other, a_transpose, b_transpose, alpha) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_gemm(this.ptr, other.ptr, a_transpose, b_transpose, alpha);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @param {boolean} a_transpose\n    * @param {boolean} b_transpose\n    * @param {number} alpha\n    * @param {Tensor} c\n    * @param {number} beta\n    * @returns {Tensor}\n    */\n    Tensor.prototype.gemm_with_c = function (other, a_transpose, b_transpose, alpha, c, beta) {\n        _assertClass(other, Tensor);\n        _assertClass(c, Tensor);\n        var ret = wasm.tensor_gemm_with_c(this.ptr, other.ptr, a_transpose, b_transpose, alpha, c.ptr, beta);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Float32Array}\n    */\n    Tensor.prototype.get_vals = function () {\n        var ret = wasm.tensor_get_vals(this.ptr);\n        return takeObject(ret);\n    };\n    /**\n    * @returns {Uint32Array}\n    */\n    Tensor.prototype.get_shape = function () {\n        var ret = wasm.tensor_get_shape(this.ptr);\n        return takeObject(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.sum = function (axes, keep_dims) {\n        var ret = wasm.tensor_sum(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.sum_square = function (axes, keep_dims) {\n        var ret = wasm.tensor_sum_square(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.product = function (axes, keep_dims) {\n        var ret = wasm.tensor_product(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.max = function (axes, keep_dims) {\n        var ret = wasm.tensor_max(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.min = function (axes, keep_dims) {\n        var ret = wasm.tensor_min(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.reduce_mean = function (axes, keep_dims) {\n        var ret = wasm.tensor_reduce_mean(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} axes\n    * @param {boolean} keep_dims\n    * @returns {Tensor}\n    */\n    Tensor.prototype.reduce_mean_square = function (axes, keep_dims) {\n        var ret = wasm.tensor_reduce_mean_square(this.ptr, addHeapObject(axes), keep_dims);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} kernel\n    * @param {Uint32Array} dilations\n    * @param {number} group\n    * @param {Uint32Array} pads\n    * @param {Uint32Array} strides\n    * @returns {Tensor}\n    */\n    Tensor.prototype.conv = function (kernel, dilations, group, pads, strides) {\n        _assertClass(kernel, Tensor);\n        var ret = wasm.tensor_conv(this.ptr, kernel.ptr, addHeapObject(dilations), group, addHeapObject(pads), addHeapObject(strides));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} kernel\n    * @param {Tensor} bias\n    * @param {Uint32Array} dilations\n    * @param {number} group\n    * @param {Uint32Array} pads\n    * @param {Uint32Array} strides\n    * @returns {Tensor}\n    */\n    Tensor.prototype.conv_with_bias = function (kernel, bias, dilations, group, pads, strides) {\n        _assertClass(kernel, Tensor);\n        _assertClass(bias, Tensor);\n        var ret = wasm.tensor_conv_with_bias(this.ptr, kernel.ptr, bias.ptr, addHeapObject(dilations), group, addHeapObject(pads), addHeapObject(strides));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} kernel_shape\n    * @param {Uint32Array} pads\n    * @param {Uint32Array} strides\n    * @param {boolean} include_pad\n    * @returns {Tensor}\n    */\n    Tensor.prototype.average_pool = function (kernel_shape, pads, strides, include_pad) {\n        var ret = wasm.tensor_average_pool(this.ptr, addHeapObject(kernel_shape), addHeapObject(pads), addHeapObject(strides), include_pad);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} shape\n    * @returns {Tensor}\n    */\n    Tensor.prototype.reshape = function (shape) {\n        var ret = wasm.tensor_reshape(this.ptr, addHeapObject(shape));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} other\n    * @param {number} axes\n    * @returns {Tensor}\n    */\n    Tensor.prototype.concat = function (other, axes) {\n        _assertClass(other, Tensor);\n        var ret = wasm.tensor_concat(this.ptr, other.ptr, axes);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} permutation\n    * @returns {Tensor}\n    */\n    Tensor.prototype.transpose = function (permutation) {\n        var ret = wasm.tensor_transpose(this.ptr, addHeapObject(permutation));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} repeats\n    * @returns {Tensor}\n    */\n    Tensor.prototype.repeat = function (repeats) {\n        var ret = wasm.tensor_repeat(this.ptr, addHeapObject(repeats));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {number} min\n    * @param {number} max\n    * @returns {Tensor}\n    */\n    Tensor.prototype.clip = function (min, max) {\n        var ret = wasm.tensor_clip(this.ptr, min, max);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {number} min\n    * @returns {Tensor}\n    */\n    Tensor.prototype.clip_min = function (min) {\n        var ret = wasm.tensor_clip_min(this.ptr, min);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {number} max\n    * @returns {Tensor}\n    */\n    Tensor.prototype.clip_max = function (max) {\n        var ret = wasm.tensor_clip_max(this.ptr, max);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} shape\n    * @returns {Tensor}\n    */\n    Tensor.prototype.expand = function (shape) {\n        var ret = wasm.tensor_expand(this.ptr, addHeapObject(shape));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.copy = function () {\n        var ret = wasm.tensor_copy(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} pads\n    * @param {number} mode\n    * @param {number} value\n    * @returns {Tensor}\n    */\n    Tensor.prototype.pad = function (pads, mode, value) {\n        var ret = wasm.tensor_pad(this.ptr, addHeapObject(pads), mode, value);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {number} axis\n    * @param {Int32Array} indices\n    * @param {Uint32Array} indice_shape\n    * @returns {Tensor}\n    */\n    Tensor.prototype.gather = function (axis, indices, indice_shape) {\n        var ret = wasm.tensor_gather(this.ptr, axis, addHeapObject(indices), addHeapObject(indice_shape));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.floor = function () {\n        var ret = wasm.tensor_floor(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @returns {Tensor}\n    */\n    Tensor.prototype.ceil = function () {\n        var ret = wasm.tensor_ceil(this.ptr);\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Uint32Array} starts\n    * @param {Uint32Array} ends\n    * @param {Uint32Array} axis\n    * @returns {Tensor}\n    */\n    Tensor.prototype.slice = function (starts, ends, axis) {\n        var ret = wasm.tensor_slice(this.ptr, addHeapObject(starts), addHeapObject(ends), addHeapObject(axis));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Float32Array} scales\n    * @returns {Tensor}\n    */\n    Tensor.prototype.upsample = function (scales) {\n        var ret = wasm.tensor_upsample(this.ptr, addHeapObject(scales));\n        return Tensor.__wrap(ret);\n    };\n    /**\n    * @param {Tensor} mean\n    * @param {Tensor} variance\n    * @param {number} epsilon\n    * @param {Tensor} scale\n    * @param {Tensor} bias\n    * @returns {Tensor}\n    */\n    Tensor.prototype.normalize = function (mean, variance, epsilon, scale, bias) {\n        _assertClass(mean, Tensor);\n        _assertClass(variance, Tensor);\n        _assertClass(scale, Tensor);\n        _assertClass(bias, Tensor);\n        var ret = wasm.tensor_normalize(this.ptr, mean.ptr, variance.ptr, epsilon, scale.ptr, bias.ptr);\n        return Tensor.__wrap(ret);\n    };\n    return Tensor;\n}());\nexport { Tensor };\nexport var __wbindgen_object_drop_ref = function (arg0) {\n    takeObject(arg0);\n};\nexport var __wbg_length_066959e714db878d = function (arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\nexport var __wbg_length_5451d14971418d5f = function (arg0) {\n    var ret = getObject(arg0).length;\n    return ret;\n};\nexport var __wbg_getindex_65894fe7a532198d = function (arg0, arg1) {\n    var ret = getObject(arg0)[arg1 >>> 0];\n    return ret;\n};\nexport var __wbg_newwithlength_22e6e266d27d1294 = function (arg0) {\n    var ret = new Uint32Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\nexport var __wbg_getindex_7de14a8d5bf01cf2 = function (arg0, arg1) {\n    var ret = getObject(arg0)[arg1 >>> 0];\n    return ret;\n};\nexport var __wbg_setindex_60fa756826393086 = function (arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = arg2 >>> 0;\n};\nexport var __wbg_newwithlength_b4f5e126ec83388d = function (arg0) {\n    var ret = new Float32Array(arg0 >>> 0);\n    return addHeapObject(ret);\n};\nexport var __wbg_getindex_ac83aab95f5406b3 = function (arg0, arg1) {\n    var ret = getObject(arg0)[arg1 >>> 0];\n    return ret;\n};\nexport var __wbg_setindex_6dc0bfa7a8831af2 = function (arg0, arg1, arg2) {\n    getObject(arg0)[arg1 >>> 0] = arg2;\n};\nexport var __wbindgen_throw = function (arg0, arg1) {\n    throw new Error(getStringFromWasm0(arg0, arg1));\n};\n//# sourceMappingURL=rust_wasm_tensor_bg.js.map","module.exports = function(originalModule) {\n\tif (!originalModule.webpackPolyfill) {\n\t\tvar module = Object.create(originalModule);\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"exports\", {\n\t\t\tenumerable: true\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","export * from \"./rust_wasm_tensor_bg.js\";\n//# sourceMappingURL=rust_wasm_tensor.js.map"],"sourceRoot":""}